{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TaskService {\n  constructor() {\n    this.tasks = [{\n      id: 1,\n      description: \"Tarefa 1\",\n      completed: true\n    }, {\n      id: 2,\n      description: \"Tarefa 2\",\n      completed: false\n    }, {\n      id: 3,\n      description: \"Tarefa 3\",\n      completed: true\n    }, {\n      id: 4,\n      description: \"Tarefa 4\",\n      completed: false\n    }, {\n      id: 5,\n      description: \"Tarefa 5\",\n      completed: false\n    }, {\n      id: 6,\n      description: \"Tarefa 6\",\n      completed: false\n    }, {\n      id: 7,\n      description: \"Tarefa 7\",\n      completed: false\n    }, {\n      id: 8,\n      description: \"Tarefa 8\",\n      completed: false\n    }, {\n      id: 9,\n      description: \"Tarefa 9\",\n      completed: false\n    }, {\n      id: 10,\n      description: \"Tarefa 10\",\n      completed: false\n    }, {\n      id: 11,\n      description: \"Tarefa 11\",\n      completed: false\n    }];\n  }\n  getAll() {\n    const list = window.localStorage.getItem('lista-tarefas');\n    if (list) {\n      this.tasks = JSON.parse(list);\n    }\n    return this.tasks;\n  }\n  getById(id) {\n    const task = this.tasks.find(value => value.id == id);\n    return task;\n  }\n  save(task) {\n    if (task.id) {\n      const taskArr = this.getById(task.id);\n      taskArr.description = task.description;\n      taskArr.completed = task.completed;\n    } else {\n      let lastId = 0;\n      if (this.tasks.length > 0) {\n        lastId = this.tasks[this.tasks.length - 1].id;\n      }\n      task.id = lastId + 1;\n      task.completed = false;\n      this.tasks.push(task);\n    }\n    window.localStorage.setItem('lista-tarefas', JSON.stringify(this.tasks));\n  }\n  delete(id) {\n    const taskIndex = this.tasks.findIndex(value => value.id == id);\n    this.tasks.splice(taskIndex, 1);\n    window.localStorage.setItem('lista-tarefas', JSON.stringify(this.tasks));\n  }\n}\nTaskService.ɵfac = function TaskService_Factory(t) {\n  return new (t || TaskService)();\n};\nTaskService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TaskService,\n  factory: TaskService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["TaskService","constructor","id","description","completed","getAll","list","window","localStorage","getItem","tasks","JSON","parse","getById","task","find","value","save","taskArr","lastId","length","push","setItem","stringify","delete","taskIndex","findIndex","splice","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\WK02\\Desktop\\smart\\newApp\\ToDoAppAngular\\src\\app\\tasks\\shared\\task.service.ts"],"sourcesContent":["import { Task } from './task';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  tasks: Task[] = [\n    {id: 1, description: \"Tarefa 1\", completed: true},\n    {id: 2, description: \"Tarefa 2\", completed: false},\n    {id: 3, description: \"Tarefa 3\", completed: true},\n    {id: 4, description: \"Tarefa 4\", completed: false},\n    {id: 5, description: \"Tarefa 5\", completed: false},\n    {id: 6, description: \"Tarefa 6\", completed: false},\n    {id: 7, description: \"Tarefa 7\", completed: false},\n    {id: 8, description: \"Tarefa 8\", completed: false},\n    {id: 9, description: \"Tarefa 9\", completed: false},\n    {id: 10, description: \"Tarefa 10\", completed: false},\n    {id: 11, description: \"Tarefa 11\", completed: false},\n  ]\n\n\n\n  constructor() { }\n\n  getAll(){\n    const list =  window.localStorage.getItem('lista-tarefas');\n    if(list){\n      this.tasks = JSON.parse(list);\n    }\n    return this.tasks;\n  }\n\n  getById(id:number){\n    const task = this.tasks.find((value) => value.id == id );\n    return task;\n  }\n\n  save(task: Task ){\n    if(task.id){\n      const taskArr = this.getById(task.id) ;\n      taskArr.description = task.description;\n      taskArr.completed = task.completed;\n    } else {\n      let lastId=0;\n      if(this.tasks.length>0){\n        lastId = this.tasks[this.tasks.length-1].id;\n      }\n      task.id = lastId + 1;\n      task.completed = false;\n      this.tasks.push(task);\n        }\n    window.localStorage.setItem('lista-tarefas', JSON.stringify(this.tasks));\n  }\n\n  delete(id: number){\n    const taskIndex = this.tasks.findIndex((value) => value.id == id);\n    this.tasks.splice(taskIndex, 1);\n    window.localStorage.setItem('lista-tarefas', JSON.stringify(this.tasks));\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}